# File Conversion Utility - Environment Configuration
# Copy this file to .env and configure for your deployment

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Server port
PORT=3000

# Server host binding
# - 'localhost' for development/testing
# - '0.0.0.0' for production/intranet deployment
HOST=localhost

# =============================================================================
# REQUIRED CONFIGURATION
# =============================================================================

# Accept self-signed certificates?
# Set to 'true' for internal servers with self-signed certs
# Set to 'false' for CA-signed certificates
ACCEPT_SELF_SIGNED_CERTS=true

# =============================================================================
# BUILD CONFIGURATION (Set Once During Initial Setup)
# =============================================================================

# LibreOffice installation path (leave blank for auto-detection)
# Auto-detection checks:
#   - Bundled: lib/libreoffice/program/soffice.exe
#   - System: C:\Program Files\LibreOffice\program\soffice.exe
#   - System: C:\Program Files (x86)\LibreOffice\program\soffice.exe
# Only set this if LibreOffice is in a non-standard location
LIBREOFFICE_PATH=

# Force use of bundled LibreOffice (recommended for production/air-gapped deployments)
# When true, attempts bundled LibreOffice first, then falls back to system LibreOffice if it fails
# When false or unset, uses system LibreOffice directly (if available)
# Bundled LibreOffice provides air-gapped operation but may need system fallback for reliability
FORCE_BUNDLED_LIBREOFFICE=true

# Microsoft Edge executable path (leave blank for auto-detection)
# Auto-detection checks:
#   - C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe
#   - C:\Program Files\Microsoft\Edge\Application\msedge.exe
# Only set this if Edge is in a non-standard location
EDGE_PATH=

# =============================================================================
# DEPLOYMENT CONFIGURATION (Configure After Deployment)
# =============================================================================

# Enable HTTPS server? (requires SSL certificates)
# Generate certificates: node scripts/generate-ssl-cert.js
SSL_ENABLED=false

# IP Whitelist (comma-separated IPs or CIDR ranges)
# Leave blank to allow all IPs
# Example: 192.168.1.0/24,10.0.0.1,172.16.0.0/16
IP_WHITELIST=

# =============================================================================
# CONVERSION QUALITY SETTINGS
# =============================================================================

# Enable DOCX pre-processing to improve conversion fidelity (default: true)
# Pre-processing normalizes fonts, colors, and styles for better LibreOffice compatibility
ENABLE_PREPROCESSING=true

# =============================================================================
# ADVANCED SETTINGS (Defaults Work For Most Cases)
# =============================================================================

# Environment mode
# - 'development' for local testing
# - 'production' for server deployment
NODE_ENV=development

# Maximum file upload size (bytes)
# Default: 52428800 (50MB)
MAX_FILE_SIZE=52428800

# Rate limit (requests per minute per IP)
# Default: 30
RATE_LIMIT_MAX=30

# Temporary file directory for file uploads and processing
# Used for temporary files during conversion process
# - './temp' for development (relative to application directory)
# - 'C:\temp' for Windows production (absolute path recommended)
# - '/tmp' for Linux production (absolute path recommended)
# - Must be writable by the application process
TEMP_DIR=./temp

# Output directory for converted files
# Final converted files are stored here before being served to clients
# - './temp/converted' for development (relative to application directory)
# - 'D:\converted' for Windows production (can be any drive/directory)
# - '/var/converted' for Linux production (absolute path recommended)
# - Must be writable by the application process
# - Separate from TEMP_DIR to allow flexible storage configurations
OUTPUT_DIR=./temp/converted

# Logging level
# Options: error, info, debug
LOG_LEVEL=info

# Concurrency control
MAX_CONCURRENCY=2
MAX_QUEUE=10

# =============================================================================
# QUICK START GUIDE
# =============================================================================

# For average developers, you only need to:
#
# 1. Set ACCEPT_SELF_SIGNED_CERTS to true or false
#
# 2. Leave LIBREOFFICE_PATH blank (auto-detects installed LibreOffice)
#
# 3. Leave EDGE_PATH blank (auto-detects Microsoft Edge)
#
# 4. After deployment, optionally configure:
#    - SSL_ENABLED (if you need HTTPS)
#    - IP_WHITELIST (if you need access restriction)
#
# That's it! The service will auto-detect paths and use sensible defaults.

# =============================================================================
# TESTING SETUP
# =============================================================================

# For initial testing on Windows 11 with LibreOffice installed:
#
# PORT=3000
# HOST=localhost
# ACCEPT_SELF_SIGNED_CERTS=true
# LIBREOFFICE_PATH=
# EDGE_PATH=
# SSL_ENABLED=false
# IP_WHITELIST=
#
# Then run:
#   npm install
#   node scripts/bundle-libreoffice.js
#   node scripts/verify-system.js
#   npm start

# =============================================================================
# PRODUCTION SETUP
# =============================================================================

# For production deployment on Windows Server:
#
# PORT=3000
# HOST=0.0.0.0
# ACCEPT_SELF_SIGNED_CERTS=true
# LIBREOFFICE_PATH=
# EDGE_PATH=
# SSL_ENABLED=true
# IP_WHITELIST=192.168.1.0/24
# NODE_ENV=production
# TEMP_DIR=C:\temp
# LOG_LEVEL=info
#
# Then run:
#   node scripts/generate-ssl-cert.js
#   npm start
