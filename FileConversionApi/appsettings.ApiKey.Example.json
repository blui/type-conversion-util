{
  // Example configuration for API Key authentication
  // Copy relevant sections to your appsettings.json or appsettings.Production.json

  "Security": {
    // CORS Configuration (optional)
    // Specify origins that can access the API from browsers
    "AllowedOrigins": [
      "https://intranet.company.local",
      "https://portal.company.local",
      "http://localhost:3000"
    ],

    // API Key Authentication
    // Set to true to require X-API-Key header on all requests (except /health and /swagger)
    "RequireApiKey": true,

    // List of valid API keys
    // Generate secure random keys (recommend 32+ characters)
    // Multiple keys allow for:
    //   - Key rotation without downtime
    //   - Different keys for different applications/teams
    //   - Revocation of individual keys
    "ApiKeys": [
      "apikey_live_abc123def456ghi789jkl012mno345pqr678stu901vwx234yz",
      "apikey_prod_xyz789uvw456rst123opq890lmn567ijk234fgh901cde678",
      "apikey_test_dev123test456dev789test012dev345test678dev901xyz"
    ]
  }
}

// HOW TO GENERATE SECURE API KEYS (PowerShell):
//
// Method 1 - Base64 random bytes (recommended):
// $bytes = New-Object byte[] 32
// [System.Security.Cryptography.RandomNumberGenerator]::Fill($bytes)
// $apiKey = "apikey_live_" + [Convert]::ToBase64String($bytes) -replace '\+','-' -replace '/','_' -replace '=',''
// Write-Host $apiKey
//
// Method 2 - GUID-based (simpler, less secure):
// $apiKey = "apikey_live_" + (New-Guid).ToString("N") + (New-Guid).ToString("N").Substring(0,10)
// Write-Host $apiKey

// USAGE IN CLIENT CODE (C#):
//
// using var client = new HttpClient();
// client.DefaultRequestHeaders.Add("X-API-Key", "apikey_live_abc123...");
// var response = await client.PostAsync(...);

// TESTING WITH CURL:
//
// curl -X POST "https://api.company.local/api/convert" \
//   -H "X-API-Key: apikey_live_abc123..." \
//   -F "file=@document.docx" \
//   -F "targetFormat=pdf" \
//   -o output.pdf

// SECURITY BEST PRACTICES:
//
// 1. Use different keys for production, staging, and development
// 2. Rotate keys periodically (quarterly recommended)
// 3. Never commit API keys to source control (use environment variables or Azure Key Vault)
// 4. Use meaningful prefixes (apikey_live_, apikey_test_) to identify key types
// 5. Log authentication failures for security monitoring
// 6. Revoke compromised keys immediately
// 7. Store keys securely on client side (Azure Key Vault, AWS Secrets Manager, etc.)
